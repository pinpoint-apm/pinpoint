# hbase timeout option==================================================================================
# hbase default:true
hbase.client.properties.hbase.ipc.client.tcpnodelay=true
# hbase default:60000
hbase.client.properties.hbase.rpc.timeout=10000
hbase.client.properties.hbase.rpc.write.timeout=5000
# hbase default:Integer.MAX_VALUE
hbase.client.properties.hbase.client.operation.timeout=10000
# hbase default: 20m
hbase.client.properties.hbase.client.meta.operation.timeout=10000
# hbase.client.scanner.max.result.size. hbase default: 2MB
hbase.client.properties.hbase.client.scanner.max.result.size=512000

# hbase socket read timeout. default: 200000
hbase.client.properties.hbase.ipc.client.socket.timeout.read=20000
# socket write timeout. hbase default: 600000
hbase.client.properties.hbase.ipc.client.socket.timeout.write=60000
# periodic asyncPut ops flush time. default:100
hbase.client.properties.hbase.tablemultiplexer.flush.period.ms=100
hbase.client.properties.hbase.client.async.flush.period.ms=100
# the max number of the retry attempts to insert queue before dropping the request. default:10000
hbase.client.properties.hbase.client.max.retries.in.queue=10000
hbase.client.properties.hbase.client.async.max.retries.in.queue=10000
hbase.client.properties.hbase.client.retries.number=4

# Limit concurrent requests to prevent OOM. Unlimited:0
hbase.client.put-writer.concurrency-limit=100000
hbase.client.span-put-writer.concurrency-limit=0

# asyncBufferedMutator, asyncTable, asyncPoller
hbase.client.put-writer=asyncPoller

hbase.client.put-writer.async-buffered-mutator.writeBufferSize=100
hbase.client.put-writer.async-buffered-mutator.writeBufferPeriodicFlush=100

## asyncPoller
# parallelism=0 : auto detect cpu core
hbase.client.put-writer.async-poller.span.parallelism=0
# 1: all core, n: 1/n core (only work if parallelism=0)
hbase.client.put-writer.async-poller.span.cpuRatio=1
# Minimum CPU core (only work if parallelism=0)
hbase.client.put-writer.async-poller.span.minCpuCore=4

hbase.client.put-writer.async-poller.span.queueSize=10000
hbase.client.put-writer.async-poller.span.writeBufferSize=100
hbase.client.put-writer.async-poller.span.writeBufferPeriodicFlush=100
hbase.client.put-writer.async-poller.span.connectionSize=1

# parallelism=0 : auto detect cpu core
hbase.client.put-writer.async-poller.default.parallelism=0
# n: 1/n core, 1: all core, 4: 1/4 core  (only work if parallelism=0)
hbase.client.put-writer.async-poller.default.cpuRatio=4
# Minimum CPU core (only work if parallelism=0)
hbase.client.put-writer.async-poller.default.minCpuCore=2
hbase.client.put-writer.async-poller.default.queueSize=5000
hbase.client.put-writer.async-poller.default.writeBufferSize=100
hbase.client.put-writer.async-poller.default.writeBufferPeriodicFlush=100

# hbase async =================================================================
# enable hbase async operation. default: false
hbase.client.async.enable=false
# the max number of the buffered asyncPut ops for each region. default:10000
hbase.client.async.inQueueSize=10000

hbase.client.compatibility-check=true

collector.batchwrite.enable=false
collector.batchwrite.timertick=100
collector.batchwrite.writebuffer.size=5012
collector.batchwrite.writebuffer.heaplimit=100MB


# Set span wal durability. default:USE_DEFAULT
# https://hbase.apache.org/2.3/book.html#wal.durability
# USE_DEFAULT: default durability
# SKIP_WAL: skip write to WAL
# ASYNC_WAL: async write to WAL
# SYNC_WAL: sync write to WAL
# FSYNC_WAL: fsync write to WAL
collector.span.durability=USE_DEFAULT